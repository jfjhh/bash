#!/bin/bash
#
# push_repos
#
# does a git push of all git repos
# adding yes as an argument forces pushing of repos,
# ignoring if there have been any new changes -- is not enabled
# by default because it takes longer.
#
# returns 1 if pushed any repos
#

PUSHED=0
RUN_DIR=`pwd`
REPOS=`find /home/$USER/** /home/$USER/**/** -name '.git' -type d -print | xargs`
FORCE=$1

printf " \e[0;34m<push_repos> \e[0;32mRunning push_repos with repos:
\e[0;1;31m$REPOS\e[0m...\n"

REPOS=`echo -n $REPOS | sed 's/\.git//g'`

for REPO in $REPOS; do
	printf " \e[34m<push_repos> \e[0;1mCDing to\t\t\e[0;1;36m$REPO\e[0m...\n"
	cd $REPO

	START_BRANCH="`git branch --no-color | grep --color=never '\*.*'`"

	for BRANCH in `git branch --no-color | sed -r 's/\*?\s+//'`; do

		printf " \e[34m<push_repos> \e[0;1mSwitching branch to\t\e[0;1;36m$BRANCH\e[0m...\n"
		git checkout $BRANCH

		printf " \e[34m<push_repos> \e[0;1mShort status of\t\e[0;1;36m$REPO\e[0m:\n"
		printf "\e[1;32m"
		git status -s | grep ' '
		STATUS="$?"
		printf "\e[0m"

		if [[ "$STATUS" == "0" || "$FORCE" == "yes" ]]; then

			printf " \e[34m<push_repos> \e[0;1mAdding\t\t\e[0;1;36m$REPO Contents\e[0m...\n"
			printf "\e[1;32m"; git add -Av; printf "\e[0m"

			printf " \e[34m<push_repos> \e[0;1mCommiting\t\t\e[0;1;36m$REPO\e[0m...\n"
			CSTR="auto push_repos (`date "+%m-%d-%y/%T"`)."
			printf "\e[1;32m"; git commit -vm "$CSTR"; printf "\e[0m"

			printf " \e[34m<push_repos> \e[0;1mPushing\t\t\e[0;1;36m$REPO\e[0m...\n"
			printf "\e[1;32m"

			git push -v origin master
			git push -v --tags origin master

			printf "\e[0m"
			printf " \e[34m<push_repos> \e[0;1mDone pushing\t\e[0;1;36m$REPO\e[0m.\n"
			PUSHED=1
		else
			printf " \e[34m<push_repos> \e[0;1mAll good for\t\e[0;1;36m$REPO\e[0m...\n"
		fi
	done

	# git checkout $START_BRANCH
done

printf "\n"
printf " \e[34m<push_repos> \e[0;32mDONE running push_repos\e[0m...\n"

cd $RUN_DIR
(
exit $PUSHED # returns 1 if pushed any repos
)

