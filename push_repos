#!/bin/bash
#
# push_repos
#
# does a git push of all git repos
# adding yes as an argument forces pushing of repos,
# ignoring if there have been any new changes -- is not enabled
# by default because it takes longer.
#
# returns 1 if it did not push any repos
#

PUSHED=1
RUN_DIR=`pwd`
# REPOS=`find /home/$USER/** /home/$USER/**/** -name '.git' -type d -print | \
REPOS=`find /home/jfjhh/ -name '.git' -type d -print | \
	sed 's/\.git//g'`
FORCE=$1

ssh-add -L
[ $? -ne 0 ] && [[ "$USER" == "root" ]] && eval `ssh-agent` && ssh-add

printf " \e[0;34m<push_repos> \e[0;32mRunning push_repos with repos:
\e[0;1;31m\t\t`echo -n $REPOS | sed 's/\s/\n\t\t/g'`\e[0m...\n\n"

for REPO in $REPOS; do
	printf " \e[34m<push_repos> \e[0;1m\e[0;1;31m$REPO\e[0m...\n"
	printf " \e[34m<push_repos> \e[0;1mCDing to\t\t\e[0;1;36m$REPO\e[0m...\n"
	cd $REPO

	if [ -e ".ignore" ]; then
		printf " \e[34m<push_repos> Ignoring $REPO\e[0m.\n"
	else

		START_BRANCH="`git branch --no-color | grep --color=never '\*.*'`"

		for BRANCH in `git branch --no-color | sed -r 's/\*?\s+//'`; do

			printf " \e[34m<push_repos> \e[0;1mSwitching branch\t\e[0;1;36m$BRANCH\e[0m...\n"
			git checkout $BRANCH &> /dev/null

			printf " \e[34m<push_repos> \e[0;1mShort status of\t\e[0;1;36m$REPO\e[0m:\n"
			printf "\e[1;35m"
			git status -s | grep ' '
			STATUS="$?"
			printf "\e[0m"

			if [[ "$STATUS" == "0" || "$FORCE" == "yes" ]]; then

				printf " \e[34m<push_repos> \e[0;1mAdding\t\t\e[0;1;36m$REPO Contents\e[0m...\n"
				printf "\e[1;35m"; git add -Av; printf "\e[0m"

				printf " \e[34m<push_repos> \e[0;1mCommiting\t\t\e[0;1;36m$REPO\e[0m...\n"
				CSTR="auto push_repos (`date "+%m-%d-%y/%T"`)."
				printf "\e[1;35m"; git commit -vm "$CSTR"; printf "\e[0m"

				printf " \e[34m<push_repos> \e[0;1mPushing\t\t\e[0;1;36m$REPO\e[0m...\n"
				printf "\e[1;35m"

				git push -v origin master
				git push -v --tags origin $BRANCH

				printf "\e[0m"
				printf " \e[34m<push_repos> \e[0;1mDone pushing\t\e[0;1;36m$REPO\e[0m.\n"
				PUSHED=0
			else
				printf " \e[34m<push_repos> \e[0;1mAll good for\t\e[0;1;36m$REPO\e[0m...\n"
			fi
		done

		git checkout $START_BRANCH &> /dev/null
		echo
	fi
done

printf "\n"
printf " \e[34m<push_repos> \e[0;32mDONE running push_repos\e[0m...\n"

cd $RUN_DIR
(
exit $PUSHED # returns 1 if it did not push any repos
)

